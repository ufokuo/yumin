<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.12">
  <POU Name="FB_FunctionGenerator" Id="{69c9f199-36dd-4eeb-9032-3058e23f3e10}" SpecialFunc="None">
    <Declaration><![CDATA[// generates a signal build up by the specified function type. v1.6
FUNCTION_BLOCK FB_FunctionGenerator
VAR_INPUT
	bEnable		: BOOL 	:= TRUE;	// set TRUE to generate the specified signal; set FALSE to reset the signal buffer
	fFrequency	: LREAL := 1000;	// in [Hz]
	fAmplitude	: LREAL := 1;
	fOffset		: LREAL	:= 0;	
	nDutyCycle	: UINT 	:= 50;		// in [%] (for pulse function)
	eFunction	: E_FunctionType := E_FunctionType.Sine;	
END_VAR
VAR_IN_OUT
	aSignal		: ARRAY[1..cOversamples] OF LREAL;
END_VAR
VAR_OUTPUT
	bError		: BOOL;
END_VAR

VAR
	bInit						: BOOL := TRUE;
	fbGetTaskIdx				: GETCURTASKINDEX;
	
	fLastFrequency				: LREAL;		// in [Hz]
	fLastAmplitude				: LREAL;
	fLastOffset					: LREAL;
	nLastDutyCycle				: UINT;
	eLastFunction				: E_FunctionType;
	
	nSamples					: UDINT;
	fCycleTime					: LREAL;		// in [s]
	fDelta						: LREAL;		// amplitude delta per sample
	fPhase						: LREAL;		// in [°]
	nSign						: INT := 1;		// 1 or -1
	fLastSignalValue			: LREAL;		// amplitude
	fPeriod						: LREAL;		// in [s]
	fAngularIncrement			: LREAL;		// in [°]
	fAngularIncrementPerCycle	: LREAL;		// in [°]
	fAngularIncrementPerSample	: LREAL;		// in [°]
	(* for modulated signal (carrier signal without offset) *)
	fCarrierFrequency					: LREAL := 500;	// in [Hz] (sine)
	fCarrierAmplitude					: LREAL := 1;
	fCarrierPeriod						: LREAL;		// in [s]
	fCarrierAngularIncrement			: LREAL;		// in [°]
	fCarrierAngularIncrementPerCycle	: LREAL;		// in [°]
	fCarrierAngularIncrementPerSample	: LREAL;		// in [°]
				
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bEnable THEN
	IF fLastFrequency <> fFrequency THEN
		bInit := TRUE; // For automatic initializing
		fLastFrequency := fFrequency;
	END_IF
	IF fLastAmplitude <> fAmplitude THEN
		bInit := TRUE; // For automatic initializing
		fLastAmplitude := fAmplitude;
	END_IF
	IF fLastOffset <> fOffset THEN
		bInit := TRUE; // For automatic initializing
		fLastOffset := fOffset;
	END_IF
	IF nLastDutyCycle <> nDutyCycle THEN
		bInit := TRUE; // For automatic initializing
		nLastDutyCycle := nDutyCycle;
	END_IF
	IF eLastFunction <> eFunction THEN
		bInit := TRUE; // For automatic initializing
		eLastFunction := eFunction;
	END_IF
	IF bInit THEN
		// Get task info	
		fbGetTaskIdx();
		fCycleTime := UDINT_TO_LREAL(TwinCAT_SystemInfoVarList._TaskInfo[fbGetTaskIdx.index].CycleTime) (*100ns*) / (10.0 * 1000.0 * 1000.0);	
		fLastSignalValue := 0;
		nSign := 1;
		fAngularIncrement := 0;
		// Flush out old data
		MEMSET(ADR(aSignal), 0, SIZEOF(aSignal));
		IF fFrequency > 0 AND fCycleTime > 0 THEN		
			// Calculate period, increments per plc cycle, increment per oversample
			IF cOversamples > 0 THEN			
				IF eFunction = E_FunctionType.Sine THEN
					fPeriod := 1/fFrequency;
					fAngularIncrementPerCycle := 360*(fCycleTime/fPeriod);
					fAngularIncrementPerSample := fAngularIncrementPerCycle/cOversamples;
					// no phase adjustment
					bInit := FALSE;	
				ELSIF eFunction = E_FunctionType.Square	THEN
					fPeriod := 1/fFrequency;
					fAngularIncrementPerCycle  := 360*(fCycleTime/fPeriod);
					fAngularIncrementPerSample := fAngularIncrementPerCycle/cOversamples;
					fPhase := 0.5*360;
					bInit := FALSE;
				ELSIF eFunction = E_FunctionType.Pulse THEN
					fPeriod := 1/fFrequency;
					fAngularIncrementPerCycle  := 360*(fCycleTime/fPeriod);
					fAngularIncrementPerSample := fAngularIncrementPerCycle/cOversamples;
					IF nDutyCycle > 100 THEN
						nDutyCycle := 100;
					END_IF
					fPhase := (UDINT_TO_LREAL(nDutyCycle)/100)*360;
					bInit := FALSE;					
				ELSIF eFunction = E_FunctionType.Triangular THEN
					fPeriod := 1/fFrequency;				
					fAngularIncrementPerCycle  := 360*(fCycleTime/fPeriod);
					fAngularIncrementPerSample := fAngularIncrementPerCycle/cOversamples;
					fPhase := 0.5*360; 
					fDelta := 4*(fAmplitude/(360/fAngularIncrementPerSample));				
					bInit := FALSE;
				ELSIF eFunction = E_FunctionType.Sawtooth THEN
					fPeriod := 1/fFrequency;			
					fAngularIncrementPerCycle  := 360*(fCycleTime/fPeriod);		
					fAngularIncrementPerSample := fAngularIncrementPerCycle/cOversamples;
					fDelta := fAmplitude/(360/fAngularIncrementPerSample);
					bInit := FALSE;
				ELSIF eFunction = E_FunctionType.AM THEN
					fPeriod := 1/fFrequency;
					fAngularIncrementPerCycle := 360*(fCycleTime/fPeriod);
					fAngularIncrementPerSample := fAngularIncrementPerCycle/cOversamples;
					// no phase adjustment
					fCarrierPeriod := 1/fCarrierFrequency;
					fCarrierAngularIncrementPerCycle := 360*(fCycleTime/fCarrierPeriod);
					fCarrierAngularIncrementPerSample := fCarrierAngularIncrementPerCycle/cOversamples;				
					// no phase adjustment	
					bInit := FALSE;
				ELSE
					bError := TRUE;	
				END_IF
			ELSE
				bError := TRUE;
			END_IF
		ELSE
			bError := TRUE;
		END_IF
	END_IF
	
	// Enable function generator
	IF NOT bError THEN		
		CASE eFunction OF		
			// sine: typical for vibrations originating from rotating machine
			E_FunctionType.Sine: Sine();
			
			// square: mixed sine signals good for analyzing spectrum				
			E_FunctionType.Square: Square();
			
			// pulse: mixed sine signals good for analyzing spectrum				
			E_FunctionType.Pulse: Pulse();
	
			// sawtooth: ramp-type vibrations, continuously increasing			
			E_FunctionType.Sawtooth: Sawtooth();
		
			// triangular: mixed sine signals good for analyzing spectrum
			E_FunctionType.Triangular: Triangular();
		
			// amplitude modulation: typical for vibrations originating from gear-tooth failure or bearing faults
			// Carrier signal with own frequency and amplitude		
			E_FunctionType.AM: AM();				
		END_CASE
	END_IF
ELSE
	// Flush out old data
	MEMSET(ADR(aSignal), 0, SIZEOF(aSignal));
	
	bInit := TRUE;
	bError := FALSE;
END_IF
]]></ST>
    </Implementation>
    <Method Name="AM" Id="{72cbf823-a283-4d76-abbd-04bdf01b5b09}">
      <Declaration><![CDATA[METHOD PRIVATE AM
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}

FOR nSamples := 1 TO cOversamples DO
	// base signal * carrier signal
	aSignal[nSamples] := ( fAmplitude*SIN(2*PI*(fAngularIncrement+(nSamples-1)*fAngularIncrementPerSample)/360) + fOffset )
							* ( fCarrierAmplitude*SIN(2*PI*(fCarrierAngularIncrement+(nSamples-1)*fCarrierAngularIncrementPerSample)/360) );
END_FOR
// Increment angular positions
fAngularIncrement := fAngularIncrement + fAngularIncrementPerCycle;
fCarrierAngularIncrement := fCarrierAngularIncrement + fCarrierAngularIncrementPerCycle;

{warning restore C0371}
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Pulse" Id="{589d36d2-806a-469d-be67-d4a57f34ac9b}">
      <Declaration><![CDATA[METHOD PRIVATE Pulse
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}

FOR nSamples := 1 TO cOversamples DO
	// For pulse wave (unequal phases)
	IF (fAngularIncrement >= 360) THEN
		fAngularIncrement := fAngularIncrement - DINT_TO_LREAL(LREAL_TO_DINT(fAngularIncrement/360))*360;
		// or with Tc2_Math library: fAngularIncrement := LMOD(fAngularIncrement,360);
	END_IF
	IF (fAngularIncrement < fPhase) THEN
		nSign := 1;		
	ELSIF (fAngularIncrement >= fPhase) THEN
		nSign := 0;
	END_IF
	fAngularIncrement := fAngularIncrement + fAngularIncrementPerSample;
	
	aSignal[nSamples] := nSign*fAmplitude;
	
	aSignal[nSamples] := aSignal[nSamples] + fOffset;
END_FOR

{warning restore C0371}
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Sawtooth" Id="{8523d13a-521d-4b1f-b20c-157f6fbf4477}">
      <Declaration><![CDATA[METHOD PRIVATE Sawtooth
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}

FOR nSamples := 1 TO cOversamples DO
	// For sawtooth wave (equal phase = period/2)
	IF (fAngularIncrement >= 360) THEN
		fAngularIncrement := fAngularIncrement - DINT_TO_LREAL(LREAL_TO_DINT(fAngularIncrement/360))*360;
		// or with Tc2_Math library: fAngularIncrement := LMOD(fAngularIncrement,360);
		fLastSignalValue := fLastSignalValue -fAmplitude;
	END_IF
	fAngularIncrement := fAngularIncrement + fAngularIncrementPerSample;

	aSignal[nSamples] := fLastSignalValue + fDelta;

	// Store last sample
	fLastSignalValue := aSignal[nSamples];
	
	aSignal[nSamples] := aSignal[nSamples] + fOffset;					
END_FOR	

{warning restore C0371}
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Sine" Id="{3cbb271a-9c9c-458c-97e2-003c0bd11c99}">
      <Declaration><![CDATA[METHOD PRIVATE Sine
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}

FOR nSamples := 1 TO cOversamples DO
	aSignal[nSamples] := fAmplitude*SIN(2*PI*(fAngularIncrement+(nSamples-1)*fAngularIncrementPerSample)/360);

	aSignal[nSamples] := aSignal[nSamples] + fOffset;
END_FOR

// Increment angular position
fAngularIncrement := fAngularIncrement + fAngularIncrementPerCycle;

{warning restore C0371}
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Square" Id="{782e04ad-12e1-4b0e-9ce3-b0830baab1f6}">
      <Declaration><![CDATA[METHOD PRIVATE Square
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}

FOR nSamples := 1 TO cOversamples DO
	// For square wave (equal phase = period/2)
	IF (fAngularIncrement >= 360) THEN
		fAngularIncrement := fAngularIncrement - DINT_TO_LREAL(LREAL_TO_DINT(fAngularIncrement/360))*360;
		// or with Tc2_Math library: fAngularIncrement := LMOD(fAngularIncrement,360);
	END_IF
	IF (fAngularIncrement < fPhase) THEN
		nSign := 1;
	ELSIF (fAngularIncrement >= fPhase) THEN
		nSign := -1;
	END_IF
	fAngularIncrement := fAngularIncrement + fAngularIncrementPerSample;
	
	aSignal[nSamples] := nSign*fAmplitude;
	
	aSignal[nSamples] := aSignal[nSamples] + fOffset;
END_FOR

{warning restore C0371}
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Triangular" Id="{6fd33f65-9406-482d-8e99-c66fd3f34453}">
      <Declaration><![CDATA[METHOD PRIVATE Triangular
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}

FOR nSamples := 1 TO cOversamples DO
	IF (fAngularIncrement >= 360) THEN
		fAngularIncrement := fAngularIncrement - DINT_TO_LREAL(LREAL_TO_DINT(fAngularIncrement/360))*360;
		// or with Tc2_Math library: fAngularIncrement := LMOD(fAngularIncrement,360);
	END_IF
	// Negative delta -> Positive delta
	IF fAngularIncrement < fPhase/2 THEN	
		nSign := 1;		
	ELSIF fAngularIncrement >= fPhase/2 AND fAngularIncrement < 3*fPhase/2 THEN
		nSign := -1;
	ELSIF fAngularIncrement >= 3*fPhase/2 THEN
		nSign := 1;	
	END_IF
	fAngularIncrement := fAngularIncrement + fAngularIncrementPerSample;
	
	aSignal[nSamples] := fLastSignalValue + nSign*fDelta;
	IF aSignal[nSamples] > fAmplitude THEN
		aSignal[nSamples] := aSignal[nSamples] - 2*(aSignal[nSamples]-fAmplitude);
	ELSIF aSignal[nSamples] < (-1)*fAmplitude THEN
		aSignal[nSamples] := aSignal[nSamples] - 2*(aSignal[nSamples]+fAmplitude);
	END_IF
	
	// Store last sample
	fLastSignalValue := aSignal[nSamples];		
	
	aSignal[nSamples] := aSignal[nSamples] + fOffset;
END_FOR

{warning restore C0371}
]]></ST>
      </Implementation>
    </Method>
    <ObjectProperties>
      <XmlArchive>
        <Data>
          <o xml:space="preserve" t="POUImageProperty">
            <n n="ImageData" />
            <v n="TransparencyColor">"White"</v>
            <v n="MakeTransparent">false</v>
          </o>
        </Data>
        <TypeList>
          <Type n="Boolean">System.Boolean</Type>
          <Type n="POUImageProperty">{bb741845-1ec5-4be9-bb0d-2cf7058af574}</Type>
          <Type n="String">System.String</Type>
        </TypeList>
      </XmlArchive>
    </ObjectProperties>
    <LineIds Name="FB_FunctionGenerator">
      <LineId Id="3" Count="76" />
      <LineId Id="84" Count="31" />
      <LineId Id="119" Count="4" />
      <LineId Id="186" Count="2" />
      <LineId Id="2" Count="0" />
      <LineId Id="189" Count="0" />
    </LineIds>
    <LineIds Name="FB_FunctionGenerator.AM">
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="3" Count="7" />
      <LineId Id="17" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_FunctionGenerator.Pulse">
      <LineId Id="25" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="3" Count="16" />
      <LineId Id="27" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_FunctionGenerator.Sawtooth">
      <LineId Id="24" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="3" Count="15" />
      <LineId Id="26" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_FunctionGenerator.Sine">
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="3" Count="8" />
      <LineId Id="20" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_FunctionGenerator.Square">
      <LineId Id="25" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="3" Count="16" />
      <LineId Id="27" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_FunctionGenerator.Triangular">
      <LineId Id="37" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="3" Count="27" />
      <LineId Id="40" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>