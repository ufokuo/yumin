<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.16">
  <POU Name="ELLIP_FILTER" Id="{3b4010ca-b783-4581-989c-0cf9cc3f5922}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ELLIP_FILTER
VAR_INPUT
	ssMethodType: SINT;
	IN: LREAL;
END_VAR
VAR_OUTPUT
	OUT: LREAL;
END_VAR
VAR
	DiscreteFilter_tmp: LREAL;
	DiscreteFilter_states: ARRAY[0..2] OF LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

CASE ssMethodType OF
    0: 
        

        (* InitializeConditions for DiscreteFilter: '<S1>/Discrete Filter' *)
        DiscreteFilter_states[0] := 0.0;
        DiscreteFilter_states[1] := 0.0;
        DiscreteFilter_states[2] := 0.0;
		
    1: 
        

        (* DiscreteFilter: '<S1>/Discrete Filter' incorporates:
         *  Inport: '<Root>/IN' *)
        DiscreteFilter_tmp := (((IN - (A_FILTER[2] * DiscreteFilter_states[0])) - (A_FILTER[3] * DiscreteFilter_states[1])) - (A_FILTER[4] * DiscreteFilter_states[2])) / A_FILTER[1];
        

        (* Outport: '<Root>/OUT' incorporates:
         *  DiscreteFilter: '<S1>/Discrete Filter' *)
        OUT := (((B_FILTER[1] * DiscreteFilter_tmp) + (B_FILTER[2] * DiscreteFilter_states[0])) + (B_FILTER[3] * DiscreteFilter_states[1])) + (B_FILTER[4] * DiscreteFilter_states[2]);
        

        (* Update for DiscreteFilter: '<S1>/Discrete Filter' *)
        DiscreteFilter_states[2] := DiscreteFilter_states[1];
        DiscreteFilter_states[1] := DiscreteFilter_states[0];
        DiscreteFilter_states[0] := DiscreteFilter_tmp;
END_CASE;

]]></ST>
    </Implementation>
    <LineIds Name="ELLIP_FILTER">
      <LineId Id="6" Count="29" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>