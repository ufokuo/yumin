<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.16">
  <POU Name="SENSOR_SIGNALS_EL6751" Id="{718bbc5e-8b43-4664-a545-01c22687b6bd}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM SENSOR_SIGNALS_EL6751
VAR
	FILTER_S1:ELLIP_FILTER;
	FILTER_S2:ELLIP_FILTER;
	FILTER_S3:ELLIP_FILTER;
	FILTER_S4:ELLIP_FILTER;
	FILTER_S5:ELLIP_FILTER;
	FILTER_S6:ELLIP_FILTER;
	FILTER_S7:ELLIP_FILTER;
	FILTER_S8:ELLIP_FILTER;
	FILTER_S9:ELLIP_FILTER;
	FILTER_S10:ELLIP_FILTER;
	
	
	Calc_Dev: ARRAY[1..3,1..10] OF LREAL:=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
	k: WORD;
	Signal_5: WORD:=0;
	Signal_1: WORD:=0;
	Mem_Signal_1: ARRAY[1..10] OF WORD:=[0,0,0,0,0,0,0,0,0,0];
	N_Mem_Sig_1: ARRAY[1..10] OF WORD:=[0,0,0,0,0,0,0,0,0,0];
	N_Dev: WORD:=500;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//SENSOR 1
SIGNAL_SENSOR_1[1]:=SHL(CAN_SENSOR_1[0],8)+CAN_SENSOR_1[1];
SIGNAL_SENSOR_1[2]:=SHL(CAN_SENSOR_1[2],8)+CAN_SENSOR_1[3];
SIGNAL_SENSOR_1[3]:=SHL(CAN_SENSOR_1[4],8)+CAN_SENSOR_1[5];
SIGNAL_SENSOR_1[4]:=SHL(CAN_SENSOR_1[6],8)+CAN_SENSOR_1[7];
CASE SIGNAL_SYNCH OF
	1: SIGNAL_SENSOR_1[5]:=SIGNAL_SENSOR_1[1];
	2: SIGNAL_SENSOR_1[5]:=SIGNAL_SENSOR_1[2];
	3: SIGNAL_SENSOR_1[5]:=SIGNAL_SENSOR_1[3];
	4: SIGNAL_SENSOR_1[5]:=SIGNAL_SENSOR_1[4];
END_CASE

//SENSOR 2
SIGNAL_SENSOR_2[1]:=SHL(CAN_SENSOR_2[0],8)+CAN_SENSOR_2[1];
SIGNAL_SENSOR_2[2]:=SHL(CAN_SENSOR_2[2],8)+CAN_SENSOR_2[3];
SIGNAL_SENSOR_2[3]:=SHL(CAN_SENSOR_2[4],8)+CAN_SENSOR_2[5];
SIGNAL_SENSOR_2[4]:=SHL(CAN_SENSOR_2[6],8)+CAN_SENSOR_2[7];
CASE SIGNAL_SYNCH OF
	1: SIGNAL_SENSOR_2[5]:=SIGNAL_SENSOR_2[1];
	2: SIGNAL_SENSOR_2[5]:=SIGNAL_SENSOR_2[2];
	3: SIGNAL_SENSOR_2[5]:=SIGNAL_SENSOR_2[3];
	4: SIGNAL_SENSOR_2[5]:=SIGNAL_SENSOR_2[4];
END_CASE

//SENSOR 3
SIGNAL_SENSOR_3[1]:=SHL(CAN_SENSOR_3[0],8)+CAN_SENSOR_3[1];
SIGNAL_SENSOR_3[2]:=SHL(CAN_SENSOR_3[2],8)+CAN_SENSOR_3[3];
SIGNAL_SENSOR_3[3]:=SHL(CAN_SENSOR_3[4],8)+CAN_SENSOR_3[5];
SIGNAL_SENSOR_3[4]:=SHL(CAN_SENSOR_3[6],8)+CAN_SENSOR_3[7];
CASE SIGNAL_SYNCH OF
	1: SIGNAL_SENSOR_3[5]:=SIGNAL_SENSOR_3[1];
	2: SIGNAL_SENSOR_3[5]:=SIGNAL_SENSOR_3[2];
	3: SIGNAL_SENSOR_3[5]:=SIGNAL_SENSOR_3[3];
	4: SIGNAL_SENSOR_3[5]:=SIGNAL_SENSOR_3[4];
END_CASE

//SENSOR 4
SIGNAL_SENSOR_4[1]:=SHL(CAN_SENSOR_4[0],8)+CAN_SENSOR_4[1];
SIGNAL_SENSOR_4[2]:=SHL(CAN_SENSOR_4[2],8)+CAN_SENSOR_4[3];
SIGNAL_SENSOR_4[3]:=SHL(CAN_SENSOR_4[4],8)+CAN_SENSOR_4[5];
SIGNAL_SENSOR_4[4]:=SHL(CAN_SENSOR_4[6],8)+CAN_SENSOR_4[7];
CASE SIGNAL_SYNCH OF
	1: SIGNAL_SENSOR_4[5]:=SIGNAL_SENSOR_4[1];
	2: SIGNAL_SENSOR_4[5]:=SIGNAL_SENSOR_4[2];
	3: SIGNAL_SENSOR_4[5]:=SIGNAL_SENSOR_4[3];
	4: SIGNAL_SENSOR_4[5]:=SIGNAL_SENSOR_4[4];
END_CASE

//SENSOR 5
SIGNAL_SENSOR_5[1]:=SHL(CAN_SENSOR_5[0],8)+CAN_SENSOR_5[1];
SIGNAL_SENSOR_5[2]:=SHL(CAN_SENSOR_5[2],8)+CAN_SENSOR_5[3];
SIGNAL_SENSOR_5[3]:=SHL(CAN_SENSOR_5[4],8)+CAN_SENSOR_5[5];
SIGNAL_SENSOR_5[4]:=SHL(CAN_SENSOR_5[6],8)+CAN_SENSOR_5[7];
CASE SIGNAL_SYNCH OF
	1: SIGNAL_SENSOR_5[5]:=SIGNAL_SENSOR_5[1];
	2: SIGNAL_SENSOR_5[5]:=SIGNAL_SENSOR_5[2];
	3: SIGNAL_SENSOR_5[5]:=SIGNAL_SENSOR_5[3];
	4: SIGNAL_SENSOR_5[5]:=SIGNAL_SENSOR_5[4];
END_CASE

//SENSOR 6
SIGNAL_SENSOR_6[1]:=SHL(CAN_SENSOR_6[0],8)+CAN_SENSOR_6[1];
SIGNAL_SENSOR_6[2]:=SHL(CAN_SENSOR_6[2],8)+CAN_SENSOR_6[3];
SIGNAL_SENSOR_6[3]:=SHL(CAN_SENSOR_6[4],8)+CAN_SENSOR_6[5];
SIGNAL_SENSOR_6[4]:=SHL(CAN_SENSOR_6[6],8)+CAN_SENSOR_6[7];
CASE SIGNAL_SYNCH OF
	1: SIGNAL_SENSOR_6[5]:=SIGNAL_SENSOR_6[1];
	2: SIGNAL_SENSOR_6[5]:=SIGNAL_SENSOR_6[2];
	3: SIGNAL_SENSOR_6[5]:=SIGNAL_SENSOR_6[3];
	4: SIGNAL_SENSOR_6[5]:=SIGNAL_SENSOR_6[4];
END_CASE

//SENSOR 7
SIGNAL_SENSOR_7[1]:=SHL(CAN_SENSOR_7[0],8)+CAN_SENSOR_7[1];
SIGNAL_SENSOR_7[2]:=SHL(CAN_SENSOR_7[2],8)+CAN_SENSOR_7[3];
SIGNAL_SENSOR_7[3]:=SHL(CAN_SENSOR_7[4],8)+CAN_SENSOR_7[5];
SIGNAL_SENSOR_7[4]:=SHL(CAN_SENSOR_7[6],8)+CAN_SENSOR_7[7];
CASE SIGNAL_SYNCH OF
	1: SIGNAL_SENSOR_7[5]:=SIGNAL_SENSOR_7[1];
	2: SIGNAL_SENSOR_7[5]:=SIGNAL_SENSOR_7[2];
	3: SIGNAL_SENSOR_7[5]:=SIGNAL_SENSOR_7[3];
	4: SIGNAL_SENSOR_7[5]:=SIGNAL_SENSOR_7[4];
END_CASE

//SENSOR 8
SIGNAL_SENSOR_8[1]:=SHL(CAN_SENSOR_8[0],8)+CAN_SENSOR_8[1];
SIGNAL_SENSOR_8[2]:=SHL(CAN_SENSOR_8[2],8)+CAN_SENSOR_8[3];
SIGNAL_SENSOR_8[3]:=SHL(CAN_SENSOR_8[4],8)+CAN_SENSOR_8[5];
SIGNAL_SENSOR_8[4]:=SHL(CAN_SENSOR_8[6],8)+CAN_SENSOR_8[7];
CASE SIGNAL_SYNCH OF
	1: SIGNAL_SENSOR_8[5]:=SIGNAL_SENSOR_8[1];
	2: SIGNAL_SENSOR_8[5]:=SIGNAL_SENSOR_8[2];
	3: SIGNAL_SENSOR_8[5]:=SIGNAL_SENSOR_8[3];
	4: SIGNAL_SENSOR_8[5]:=SIGNAL_SENSOR_8[4];
END_CASE

//SENSOR 9
SIGNAL_SENSOR_9[1]:=SHL(CAN_SENSOR_9[0],8)+CAN_SENSOR_9[1];
SIGNAL_SENSOR_9[2]:=SHL(CAN_SENSOR_9[2],8)+CAN_SENSOR_9[3];
SIGNAL_SENSOR_9[3]:=SHL(CAN_SENSOR_9[4],8)+CAN_SENSOR_9[5];
SIGNAL_SENSOR_9[4]:=SHL(CAN_SENSOR_9[6],8)+CAN_SENSOR_9[7];
CASE SIGNAL_SYNCH OF
	1: SIGNAL_SENSOR_9[5]:=SIGNAL_SENSOR_9[1];
	2: SIGNAL_SENSOR_9[5]:=SIGNAL_SENSOR_9[2];
	3: SIGNAL_SENSOR_9[5]:=SIGNAL_SENSOR_9[3];
	4: SIGNAL_SENSOR_9[5]:=SIGNAL_SENSOR_9[4];
END_CASE

//SENSOR 10
SIGNAL_SENSOR_10[1]:=SHL(CAN_SENSOR_10[0],8)+CAN_SENSOR_10[1];
SIGNAL_SENSOR_10[2]:=SHL(CAN_SENSOR_10[2],8)+CAN_SENSOR_10[3];
SIGNAL_SENSOR_10[3]:=SHL(CAN_SENSOR_10[4],8)+CAN_SENSOR_10[5];
SIGNAL_SENSOR_10[4]:=SHL(CAN_SENSOR_10[6],8)+CAN_SENSOR_10[7];
CASE SIGNAL_SYNCH OF
	1: SIGNAL_SENSOR_10[5]:=SIGNAL_SENSOR_10[1];
	2: SIGNAL_SENSOR_10[5]:=SIGNAL_SENSOR_10[2];
	3: SIGNAL_SENSOR_10[5]:=SIGNAL_SENSOR_10[3];
	4: SIGNAL_SENSOR_10[5]:=SIGNAL_SENSOR_10[4];
END_CASE

// SIGNAL FILTERING
FILTER_S1(ssMethodType:=1 , IN:= SIGNAL_SENSOR_1[5], OUT=> SIGNAL_SENSOR_1_FLT);
FILTER_S2(ssMethodType:=1 , IN:= SIGNAL_SENSOR_2[5], OUT=> SIGNAL_SENSOR_2_FLT);
FILTER_S3(ssMethodType:=1 , IN:= SIGNAL_SENSOR_3[5], OUT=> SIGNAL_SENSOR_3_FLT);
FILTER_S4(ssMethodType:=1 , IN:= SIGNAL_SENSOR_4[5], OUT=> SIGNAL_SENSOR_4_FLT);
FILTER_S5(ssMethodType:=1 , IN:= SIGNAL_SENSOR_5[5], OUT=> SIGNAL_SENSOR_5_FLT);
FILTER_S6(ssMethodType:=1 , IN:= SIGNAL_SENSOR_6[5], OUT=> SIGNAL_SENSOR_6_FLT);
FILTER_S7(ssMethodType:=1 , IN:= SIGNAL_SENSOR_7[5], OUT=> SIGNAL_SENSOR_7_FLT);
FILTER_S8(ssMethodType:=1 , IN:= SIGNAL_SENSOR_8[5], OUT=> SIGNAL_SENSOR_8_FLT);
FILTER_S9(ssMethodType:=1 , IN:= SIGNAL_SENSOR_9[5], OUT=> SIGNAL_SENSOR_9_FLT);
FILTER_S10(ssMethodType:=1 , IN:= SIGNAL_SENSOR_10[5], OUT=> SIGNAL_SENSOR_10_FLT);

// SIGNAL DEVIATION AND SIGNAL STATE
FOR k:=1 TO 10 BY 1 DO
	Calc_Dev[1,k]:=Calc_Dev[1,k]+1;
	CASE k OF
		1: 	Signal_5:=SIGNAL_SENSOR_1[5];
			Signal_1:=SIGNAL_SENSOR_1[1];
		2: 	Signal_5:=SIGNAL_SENSOR_2[5];
			Signal_1:=SIGNAL_SENSOR_2[1];
		3: 	Signal_5:=SIGNAL_SENSOR_3[5];
			Signal_1:=SIGNAL_SENSOR_3[1];
		4: 	Signal_5:=SIGNAL_SENSOR_4[5];
			Signal_1:=SIGNAL_SENSOR_4[1];
		5: 	Signal_5:=SIGNAL_SENSOR_5[5];
			Signal_1:=SIGNAL_SENSOR_5[1];
		6: 	Signal_5:=SIGNAL_SENSOR_6[5];
			Signal_1:=SIGNAL_SENSOR_6[1];
		7: 	Signal_5:=SIGNAL_SENSOR_7[5];
			Signal_1:=SIGNAL_SENSOR_7[1];
		8: 	Signal_5:=SIGNAL_SENSOR_8[5];
			Signal_1:=SIGNAL_SENSOR_8[1];
		9: 	Signal_5:=SIGNAL_SENSOR_9[5];
			Signal_1:=SIGNAL_SENSOR_9[1];
		10: Signal_5:=SIGNAL_SENSOR_10[5];
			Signal_1:=SIGNAL_SENSOR_10[1];	
	END_CASE
	
	IF Calc_Dev[1,k]<N_Dev THEN
		Calc_Dev[2,k]:=Calc_Dev[2,k]+EXPT(WORD_TO_LREAL(Signal_5),2)/(N_Dev-1);
		Calc_Dev[3,k]:=Calc_Dev[3,k]+WORD_TO_LREAL(Signal_5);
	END_IF
	
	IF Calc_Dev[1,k]=N_Dev THEN
		IF Calc_Dev[2,k]-(EXPT(Calc_Dev[3,k],2)/EXPT((N_Dev-1),2))>=0 THEN
			SIGNAL_DEVIATION[k]:=LREAL_TO_WORD(3*SQRT(Calc_Dev[2,k]-(EXPT(Calc_Dev[3,k],2)/EXPT((N_Dev-1),2))));
			Calc_Dev[1,k]:=0;
			Calc_Dev[2,k]:=0;
			Calc_Dev[3,k]:=0;
			ELSE
				Calc_Dev[1,k]:=0;
				Calc_Dev[2,k]:=0;
				Calc_Dev[3,k]:=0;
				SIGNAL_DEVIATION[k]:=0;
		END_IF
	END_IF
	
	IF Signal_1<>Mem_Signal_1[k] THEN
		N_Mem_Sig_1[k]:=0;
		Mem_Signal_1[k]:=Signal_1;
		ELSE
		N_Mem_Sig_1[k]:=N_Mem_Sig_1[k]+1;
		Mem_Signal_1[k]:=Signal_1;
	END_IF
	
	IF N_Mem_Sig_1[k]< N_Dev THEN
		SENSOR_STATE[k]:=1;
		ELSE
			SENSOR_STATE[k]:=0;	
			SIGNAL_DEVIATION[k]:=0;	
	END_IF
	
END_FOR
]]></ST>
    </Implementation>
    <LineIds Name="SENSOR_SIGNALS_EL6751">
      <LineId Id="6" Count="192" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>