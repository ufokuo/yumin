<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.16">
  <POU Name="ADAS_Kom" Id="{75b67a30-d127-4177-8c6d-795af597e244}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM ADAS_Kom
VAR CONSTANT
	///defaultConfig : AdasConfiguration := (track := [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
	///										signal:= [4, 4, 4, 4, 4, 5, 5, 5, 5,  5,  5,  6,  6,  6,  6,  6,  6, 17, 17, 17, 17, 17, 17,  1,  1,  1,  1,  1,  1,  1],
	///										axis  := [1, 1, 2, 3, 4, 1, 1, 2, 3,  4,  5,  1,  1,  2,  3,  4,  5,  1,  1,  2,  3,  4,  5,  1,  1,  2,  3,  4,  5,  1]);
	///
	///
	///unten stehende Konfiguration nach neuen Schema
	///1->6
	///2->1
	///3->2
	///4->3
	///5->4
	///6->1
	///
	///											Messwert	Position		Geschwindigkeit				Beschleunigung				Strom						Offen
	///											Funktion x, x, x, x, o, 	x, x, x, x,  x,  ?,		 x,  x,  x,  x,  x,  ?,		 x,  x,  x,  x,  x,  ?,	
	///											Achse	 x, y, z, c, n, 	x, y, z, c,  b,  n, 	 x,  y,  z,  c,  b,  n,		 x,  y,  z,  c,  b,  n,
	defaultConfig: AdasConfiguration := (track := [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], signal := [4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 17, 17, 17, 17, 17, 17, 4, 4, 1, 1, 1, 1, 1], axis := [6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 5, 6, 6, 1, 1, 1]);
	/// Lesen von allen 30 Datenstreams
	numberOfDefaultTracks: UINT := 30;
	/// Anzahl ms die nach Ausgabe einer Anforderung gewartet werden soll, bevor die Antwort ausgewertet wird.
	waitTime: INT := 50;
END_VAR
VAR_INPUT
	ADAS_IN AT %I*: ARRAY[0..63] OF WORD;
	/// UNION  aus DUTs
	adasStream_IN: AdasData_In;
	/// STRUCT aus DUTs
	requestedConfiguration_IN AT %I*: AdasConfiguration;
	numberOfRequestetTracks_IN AT %I*: UINT;
	ConfigRequest_IN AT %I*: BOOL;
END_VAR
VAR
	waitTimer: INT := 0;
	/// STRUCT aus DUTs
	actualConfig: AdasConfiguration;
	/// STRUCT aus DUTs
	requestedConfiguration: AdasConfiguration;
	configRequestTrigger: R_TRIG;
	tracksToConfig: UINT;
	configuredTracks: UINT := 0;
	index: UINT;
	///ENUM aus DUTs
	comState: eAdasKom_State := eAdasKom_State.WaitForNC;
	///ENUM aus DUTs
	configState: eAdasKonfig_State := eAdasKonfig_State.Init;
	selectCounter: SINT := 0;
	init: BOOL := 0;
	kommzeit: BOOL := 0;
	deint: BOOL := 0;
	track: BOOL := 0;
	signal: BOOL := 0;
END_VAR
VAR_OUTPUT
	/// UNION  aus DUTs
	adasStreamSetup_OUT AT %Q*: AdasSetup_Out;
	adasData AT %Q*: ARRAY[0..(gVarL.gVar_NumberOfAdasTracks - 1)] OF DINT;
	StartExe: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[adasStream_IN.asBin := ADAS_IN;

//Kommunikationszykluszeit von ADAS festlegen
IF kommzeit THEN
	//The machine axes numbers basically range from 1 to 31. Only axes that are enabled by 20070 $MC_AXCONF_MACHAX_USED within one of the active channels can supply data.
	adasStreamSetup_OUT.asSetup.blockType   := 15;	//entspricht 0xF aus Anleitung
	adasStreamSetup_OUT.asSetup.blockLength := 8;	//festgelegt in Anleitung
	adasStreamSetup_OUT.asSetup.selectTrack := 255; //Command mode
	adasStreamSetup_OUT.asSetup.selectAxis  := 100; //wenn man zykluszeit wechseln will
	adasStreamSetup_OUT.asSetup.selectSignal:= 8; //neue zykluszeit: 10x 0.5ms =5ms
	adasStreamSetup_OUT.asSetup.selectFlag  := adasStream_IN.asData.acceptFlag;
	kommzeit := 0;
	comState := eAdasKom_State.WaitForNC;
	configState := eAdasKonfig_State.Init;
END_IF


//Track bezeichnung senden von ADAS-Kommunikation
IF track THEN
	//The machine axes numbers basically range from 1 to 31. Only axes that are enabled by 20070 $MC_AXCONF_MACHAX_USED within one of the active channels can supply data.
	adasStreamSetup_OUT.asSetup.blockType   := 15;	//entspricht 0xF aus Anleitung
	adasStreamSetup_OUT.asSetup.blockLength := 8;	//festgelegt in Anleitung
	adasStreamSetup_OUT.asSetup.selectTrack := 255; //Comande mode
	adasStreamSetup_OUT.asSetup.selectAxis  := 122; //all tracks resetten
	adasStreamSetup_OUT.asSetup.selectSignal:= 0;   //Vorgabe
	adasStreamSetup_OUT.asSetup.selectFlag  := adasStream_IN.asData.acceptFlag;
	track := 0;
	comState := eAdasKom_State.WaitForNC;
	configState := eAdasKonfig_State.Init;
END_IF

//Signal bezeichnung senden von ADAS-Kommunikation
IF signal THEN
	//The machine axes numbers basically range from 1 to 31. Only axes that are enabled by 20070 $MC_AXCONF_MACHAX_USED within one of the active channels can supply data.
	adasStreamSetup_OUT.asSetup.blockType   := 15;	//entspricht 0xF aus Anleitung
	adasStreamSetup_OUT.asSetup.blockLength := 8;	//festgelegt in Anleitung
	adasStreamSetup_OUT.asSetup.selectTrack := 255; //Comande mode
	adasStreamSetup_OUT.asSetup.selectAxis  := 123; //all tracks resetten
	adasStreamSetup_OUT.asSetup.selectSignal:= 0;   //Vorgabe
	adasStreamSetup_OUT.asSetup.selectFlag  := adasStream_IN.asData.acceptFlag;
	signal := 0;
	comState := eAdasKom_State.WaitForNC;
//	configState := eAdasKonfig_State.Init;
END_IF


//Deinitialisierung von ADAS-Kommunikation
IF deint THEN
	//The machine axes numbers basically range from 1 to 31. Only axes that are enabled by 20070 $MC_AXCONF_MACHAX_USED within one of the active channels can supply data.
	adasStreamSetup_OUT.asSetup.blockType   := 15;	//entspricht 0xF aus Anleitung
	adasStreamSetup_OUT.asSetup.blockLength := 8;	//festgelegt in Anleitung
	adasStreamSetup_OUT.asSetup.selectTrack := 255; //Comande mode
	adasStreamSetup_OUT.asSetup.selectAxis  := 110; //all tracks resetten
	adasStreamSetup_OUT.asSetup.selectSignal:= 0;   //Vorgabe
	adasStreamSetup_OUT.asSetup.selectFlag  := adasStream_IN.asData.acceptFlag;
	deint := 0;
	comState := eAdasKom_State.WaitForNC;
	configState := eAdasKonfig_State.Init;
END_IF

//Initialisierung von ADAS-Kommunikation
IF init THEN
	//The machine axes numbers basically range from 1 to 31. Only axes that are enabled by 20070 $MC_AXCONF_MACHAX_USED within one of the active channels can supply data.
	adasStreamSetup_OUT.asSetup.blockType   := 15;	//entspricht 0xF aus Anleitung
	adasStreamSetup_OUT.asSetup.blockLength := 8;	//festgelegt in Anleitung
	adasStreamSetup_OUT.asSetup.selectTrack := 0;
	adasStreamSetup_OUT.asSetup.selectAxis  := 0;
	adasStreamSetup_OUT.asSetup.selectSignal:= 0;
	adasStreamSetup_OUT.asSetup.selectFlag  := adasStream_IN.asData.acceptFlag;
	init := 0;
	comState := eAdasKom_State.WaitForNC;
	configState := eAdasKonfig_State.Init;
END_IF




CASE comState OF
	eAdasKom_State.WaitForNC:
		IF adasStream_IN.asData.comCycle > 0 THEN
			comState := eAdasKom_State.SetDefaultkonfig;
			requestedConfiguration := defaultConfig;
			tracksToConfig := numberOfDefaultTracks;
			configState := eAdasKonfig_State.SendTrackConfig;
			configuredTracks := 0;		
		END_IF
		
	eAdasKom_State.SetDefaultkonfig:
		CASE configState OF
			eAdasKonfig_State.SendTrackConfig:
			    selectCounter := adasStream_IN.asData.acceptFlag;
				selectCounter := selectCounter + 1;
				IF (selectCounter > 127) THEN
					selectCounter := 0;
				END_IF
				adasStreamSetup_OUT.asSetup.selectAxis 	:= requestedConfiguration.axis[configuredTracks];
				adasStreamSetup_OUT.asSetup.selectSignal:= requestedConfiguration.signal[configuredTracks];
				adasStreamSetup_OUT.asSetup.selectTrack	:= requestedConfiguration.track[configuredTracks];
				adasStreamSetup_OUT.asSetup.selectFlag	:= selectCounter;
				configState := eAdasKonfig_State.WaitForSelectFlag;
				waitTimer := 0;
			eAdasKonfig_State.WaitForSelectFlag:
				waitTimer := waitTimer + 1;
				IF (waitTimer >= waitTime)THEN
					IF (adasStream_IN.asData.acceptFlag = selectCounter)THEN
						
						actualConfig.axis[requestedConfiguration.track[configuredTracks] - 1]  := requestedConfiguration.axis[configuredTracks];
						actualConfig.signal[requestedConfiguration.track[configuredTracks]- 1] := requestedConfiguration.signal[configuredTracks];
						actualConfig.track[requestedConfiguration.track[configuredTracks] - 1] := requestedConfiguration.track[configuredTracks];
						
						configuredTracks := configuredTracks + 1;
						IF configuredTracks = tracksToConfig THEN
							comState :=	eAdasKom_State.Running;
							configState := eAdasKonfig_State.ConfigCurrent;
						ELSE
							configState := eAdasKonfig_State.SendTrackConfig;
						END_IF
	
					ELSIF (adasStream_IN.asData.acceptFlag < 0) THEN
						comState :=	eAdasKom_State.Error;		
					END_IF
				END_IF
		END_CASE
				
	eAdasKom_State.Running:
		adasData := adasStream_IN.asData.Data;
		CASE configState OF 
			eAdasKonfig_State.ConfigCurrent:
				configRequestTrigger(CLK := ConfigRequest_IN);
				IF configRequestTrigger.Q THEN
					requestedConfiguration := requestedConfiguration_IN;
					tracksToConfig := numberOfRequestetTracks_IN;
					configuredTracks := 0;
					configState := eAdasKonfig_State.SendTrackConfig;
				END_IF
			eAdasKonfig_State.SendTrackConfig:
				selectCounter := adasStream_IN.asData.acceptFlag;
				selectCounter := selectCounter + 1;
				IF (selectCounter > 127) THEN
					selectCounter := 0;
				END_IF
				adasStreamSetup_OUT.asSetup.selectAxis 	:= requestedConfiguration.axis[configuredTracks];
				adasStreamSetup_OUT.asSetup.selectSignal:= requestedConfiguration.signal[configuredTracks];
				adasStreamSetup_OUT.asSetup.selectTrack	:= requestedConfiguration.track[configuredTracks];
				adasStreamSetup_OUT.asSetup.selectFlag	:= selectCounter;
				configState := eAdasKonfig_State.WaitForSelectFlag;
			eAdasKonfig_State.WaitForSelectFlag:
				IF (adasStream_IN.asData.acceptFlag = selectCounter)THEN
					
					actualConfig.axis[requestedConfiguration.track[configuredTracks]]   := requestedConfiguration.axis[configuredTracks];
					actualConfig.signal[requestedConfiguration.track[configuredTracks]] := requestedConfiguration.signal[configuredTracks];
					actualConfig.track[requestedConfiguration.track[configuredTracks]]  := requestedConfiguration.track[configuredTracks];
					
					configuredTracks := configuredTracks + 1;
					IF configuredTracks = tracksToConfig THEN
						configState := eAdasKonfig_State.ConfigCurrent;
					ELSE
						configState := eAdasKonfig_State.SendTrackConfig;
					END_IF
				ELSIF (adasStream_IN.asData.acceptFlag < 0) THEN
					comState :=	eAdasKom_State.Error;		
				END_IF
		END_CASE
	eAdasKom_State.Error:	
END_CASE

]]></ST>
    </Implementation>
    <LineIds Name="ADAS_Kom">
      <LineId Id="3" Count="165" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>